  CREATE TABLE "AZURE_FILES" 
   (	"FILE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"REF_OBJECT_TYPE" VARCHAR2(30 CHAR) NOT NULL ENABLE, 
	"REF_OBJECT_ID" NUMBER NOT NULL ENABLE, 
	"FILENAME" VARCHAR2(400 CHAR) NOT NULL ENABLE, 
	"MIME_TYPE" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"FILE_SIZE" NUMBER NOT NULL ENABLE, 
	"AZURE_FILENAME" VARCHAR2(450 CHAR) NOT NULL ENABLE, 
	"DELETE_AFTER_DATE" DATE, 
	"DELETED" VARCHAR2(1 CHAR) NOT NULL ENABLE, 
	"DELETED_DATE" DATE, 
	"DELETED_BY" VARCHAR2(100 CHAR), 
	"CREATED_BY" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"CREATED_DATE" DATE NOT NULL ENABLE, 
	 CONSTRAINT "AZURE_FILES_PK" PRIMARY KEY ("FILE_ID")
  USING INDEX  ENABLE
   ) ;
create or replace PACKAGE AZURE_API_PKG AS 
c_plugin_name varchar2(100);
-- put_blob - Pushes Blob to Azure BLOB storage
function put_blob      (   p_process in apex_plugin.t_process, 
                            p_plugin  in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

-- delete_blob - Delete Blob to Azure BLOB storage
function delete_blob      (   p_process in apex_plugin.t_process, 
                            p_plugin  in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;
-- undelete_blob - Un-Delete Blob to Azure BLOB storage
function undelete_blob    (   p_process in apex_plugin.t_process, 
                            p_plugin  in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;
-- get_pdf - Displays PDF BLOB on screen in an iframe
FUNCTION get_pdf      (p_region              IN apex_plugin.t_region,
                       p_plugin              IN apex_plugin.t_plugin,
                       p_is_printer_friendly IN BOOLEAN)
  RETURN apex_plugin.t_region_render_result;
END AZURE_API_PKG;
/



   CREATE SEQUENCE  "AZURE_FILES_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
create or replace PACKAGE BODY           "AZURE_API_PKG" AS

g_base_url varchar2(200);
g_sas varchar2(200);


-- helper function for raising errors
procedure raise_error
  ( p_message in varchar2
  , p0        in varchar2 default null
  , p1        in varchar2 default null
  , p2        in varchar2 default null
    )
as
begin
    raise_application_error(-20001, apex_string.format(c_plugin_name || ' - ' || p_message, p0, p1, p2));
end raise_error;

-- Private procedure to set  URL global variable
procedure set_globals(p_azure_sas_uri varchar2)
as
begin
    select  substr(p_azure_sas_uri,1,instr(p_azure_sas_uri,'?')-1),
            substr(p_azure_sas_uri,instr(p_azure_sas_uri,'?'))
    into g_base_url, g_sas
    from dual;
end set_globals;

-- =============================================================================
--
--  Azure - Push BLOB - Simon Joyce, V1 10-Oct-2023
--  returns status
--
-- =============================================================================

FUNCTION put_blob (p_process IN apex_plugin.t_process,
                   p_plugin  IN apex_plugin.t_plugin)
RETURN apex_plugin.t_process_exec_result
AS
  -- Process attributes
  l_file_name_list    p_process.attribute_01%TYPE := p_process.attribute_01;
  l_ref_object_type   p_process.attribute_02%TYPE := p_process.attribute_02;
  l_ref_object_id     p_process.attribute_03%TYPE := p_process.attribute_03;
  l_delete_after_date p_process.attribute_04%TYPE := p_process.attribute_04;
  -- Plugin attributes
  l_azure_sas_url     p_plugin.attribute_01%TYPE := p_plugin.attribute_01;
  -- Other Locals
  l_result            apex_plugin.t_process_exec_result;
  l_error_count       NUMBER := 0;
  l_file_names        APEX_T_VARCHAR2;
  l_file              apex_application_temp_files%ROWTYPE;
  l_url               VARCHAR2(1000);
  l_clob              CLOB;
  l_file_id           NUMBER;
  l_filename          VARCHAR2(450);
BEGIN
    -- global constants
    Set_globals(l_azure_sas_url);  -- Call procedure to split SAS URL to base URL and Token

    c_plugin_name := 'Azure - Push BLOB';

    -- debug
    IF apex_application.g_debug THEN
      apex_plugin_util.Debug_process (p_plugin => p_plugin,
      p_process => p_process);
    END IF;
    -- Split : delimited string of filenames into a table ot filenames
    l_file_names := apex_string.Split (p_str => l_file_name_list, p_sep => ':');
    -- loop through filenames
    FOR i IN 1 .. l_file_names.count LOOP
        SELECT *
        INTO   l_file
        FROM   apex_application_temp_files
        WHERE  name = L_file_names(i);
        -- assign next sequence number
        l_file_id := azure_files_s.NEXTVAL;
        -- remove whitespace from filename and append sequence number to make unique
        l_filename := Replace(l_file.filename, ' ', '_') || '_' || l_file_id;
        -- construct REST URL
        l_url := g_base_url || '/' || l_filename || g_sas;
        -- Set Request Headers
        apex_web_service.Set_request_headers(p_name_01 => 'x-ms-blob-type',
                                            p_value_01 => 'BlockBlob', p_name_02 => 'Content-Type',
                                            p_value_02 => l_file.mime_type, p_name_03 => 'x-ms-version',
                                            p_value_03 => '2022-11-02');
        -- Make PUT REST Request
        l_clob := apex_web_service.Make_rest_request(p_url => l_url,
                                                     p_http_method => 'PUT',
                                                     p_body_blob => l_file.blob_content);
        -- Check Response
        IF apex_web_service.g_status_code = 201 THEN  -- Success
            --Append Success Message
            l_result.success_message := l_result.success_message ||'Filename: ' || l_file.filename || ' uploaded. ';
            --Format delete after date
            l_delete_after_date := To_date(l_delete_after_date, 'DD-MON-YYYY');
            --Insert details into local table
            INSERT INTO xx_apex.azure_files
                      (file_id,
                       ref_object_type,
                       ref_object_id,
                       filename,
                       mime_type,
                       file_size,
                       azure_filename,
                       delete_after_date,
                       created_by,
                       created_date,
                       deleted)
            VALUES      ( l_file_id,
                       l_ref_object_type,
                       l_ref_object_id,
                       l_file.filename,
                       l_file.mime_type,
                       Length(l_file.blob_content),
                       l_filename,
                       l_delete_after_date,
                       Nvl(V('APP_USER'), USER),
                       SYSDATE,
                       'N');
        ELSIF apex_web_service.g_status_code >= 400 THEN -- Handled REST Error
            --Append Success Message with Error
            l_result.success_message := l_result.success_message ||'ERROR - Filename: ' || l_file.filename || ' upload failed. ';
            -- increment error count
            l_error_count := l_error_count + 1;
        ELSE  -- Unhandled REST Error
            --Append Success Message with Error
            l_result.success_message := l_result.success_message ||'ERROR - Filename: ' ||l_file.filename  ||' upload failed. ';
            -- increment error count
            l_error_count := l_error_count + 1;
        END IF;
        -- Delete temp BLOB
        DELETE FROM apex_application_temp_files
        WHERE  filename = l_file.filename;
    END LOOP;

    -- Error Handling 
    IF l_error_count > 0 THEN
      Raise_error('Error Uploading some files, check debug log and retry or Contact Suppport');
END IF;

RETURN l_result;
EXCEPTION
  WHEN OTHERS THEN
             RAISE;
END put_blob; 


FUNCTION delete_blob (p_process IN apex_plugin.t_process,
                      p_plugin  IN apex_plugin.t_plugin)
RETURN apex_plugin.t_process_exec_result
AS
  -- Process attributes
  l_file_id       p_process.attribute_01%TYPE := p_process.attribute_01;
  -- Plugin attributes
  l_azure_sas_uri p_plugin.attribute_01%TYPE := p_plugin.attribute_01;
  -- Other Locals
  l_result        apex_plugin.t_process_exec_result;
  l_url           VARCHAR2(1000);
  l_clob          CLOB;
  l_filename      VARCHAR2(450);
BEGIN
    -- Call procedure to split SAS URL to base URL and Token
    Set_globals(l_azure_sas_uri);

    c_plugin_name := 'Azure - Delete BLOB';

    -- debug
    IF apex_application.g_debug THEN
      apex_plugin_util.Debug_process (p_plugin => p_plugin,
      p_process => p_process);
    END IF;
    -- Get Azure Filename related to File ID
    SELECT azure_filename
    INTO   l_filename
    FROM   azure_files
    WHERE  file_id = l_file_id;
    -- Construct REST URL
    l_url := g_base_url || '/' || l_filename || g_sas;

    -- Make DELETE Rest Request
    l_clob := apex_web_service.Make_rest_request(p_url => l_url,
                                                p_http_method => 'DELETE');
    -- Check Response
    IF apex_web_service.g_status_code = 202 THEN -- Success
        --Set Success Message
        l_result.success_message := 'BLOB Deleted succesfully';
        -- Update local table to record BLOB deleted     
        UPDATE xx_apex.azure_files
        SET    deleted = 'Y',
               deleted_date = SYSDATE,
               deleted_by = Nvl(V('APP_USER'), USER)
        WHERE  file_id = l_file_id;
    ELSIF apex_web_service.g_status_code >= 400 THEN  -- Handled REST Error
        --Set Success Message with Error
        l_result.success_message := 'BLOB Delete Failed:' || apex_web_service.g_status_code ||' - ' ||apex_web_service.g_reason_phrase;
    ELSE  -- Unhandled REST Error
        --Set Success Message with Error
        l_result.success_message := 'Unknown error with BLOB Deletion!' || apex_web_service.g_status_code || ' - ' || apex_web_service.g_reason_phrase;
    END IF;

     RETURN l_result;
     
EXCEPTION
  WHEN OTHERS THEN
             RAISE;
END delete_blob; 

FUNCTION undelete_blob (p_process IN apex_plugin.t_process,
                        p_plugin  IN apex_plugin.t_plugin)
RETURN apex_plugin.t_process_exec_result
AS
  -- Process attributes
  l_file_id       p_process.attribute_01%TYPE := p_process.attribute_01;
  -- Plugin attributes
  l_azure_sas_uri p_plugin.attribute_01%TYPE := p_plugin.attribute_01;
  -- Other Locals
  l_result        apex_plugin.t_process_exec_result;
  l_url           VARCHAR2(1000);
  l_clob          CLOB;
  l_filename      VARCHAR2(450);
BEGIN
    -- Call procedure to split SAS URL to base URL and Token
    Set_globals(l_azure_sas_uri);

    c_plugin_name := 'Azure - undelete BLOB';

    -- debug
    IF apex_application.g_debug THEN
      apex_plugin_util.Debug_process (p_plugin => p_plugin,
      p_process => p_process);
    END IF;
    -- Get Azure Filename related to File ID
    SELECT azure_filename
    INTO   l_filename
    FROM   azure_files
    WHERE  file_id = l_file_id;
    -- Construct REST URL
    l_url := g_base_url || '/' || l_filename || g_sas || '&comp=undelete';
    -- Set Request Headers
    apex_web_service.Set_request_headers(p_name_01 => 'x-ms-version',
                                        p_value_01 => '2022-11-02', 
                                        p_name_02 => 'Content-Length', 
                                        p_value_02 => '0'
                                        );
    -- Make PUT REST Request
    l_clob := apex_web_service.Make_rest_request(p_url => l_url,
                                                p_http_method => 'PUT');
    -- Check Response
    IF apex_web_service.g_status_code = 200 THEN  -- Success
        l_result.success_message := 'BLOB Un-Deleted succesfully';
        -- Update Local table to show BLOB as not deleted        
        UPDATE xx_apex.azure_files
        SET    deleted = 'N',
               deleted_date = NULL,
               deleted_by = NULL
        WHERE  file_id = l_file_id;
    ELSIF apex_web_service.g_status_code >= 400 THEN -- Handled REST Error
      
      l_result.success_message := 'BLOB Delete Failed:' || apex_web_service.g_status_code || ' - ' || apex_web_service.g_reason_phrase;
    ELSE -- Unhandled REST Error
      l_result.success_message := 'Unknown error with BLOB Deletion!' || apex_web_service.g_status_code || ' - ' || apex_web_service.g_reason_phrase;
    END IF;

    RETURN l_result;
EXCEPTION
  WHEN OTHERS THEN
             RAISE;
END undelete_blob; 

FUNCTION Get_pdf (p_region              IN apex_plugin.t_region,
                  p_plugin              IN apex_plugin.t_plugin,
                  p_is_printer_friendly IN BOOLEAN)
RETURN apex_plugin.t_region_render_result
IS
  -- Process attributes
  l_filename      p_region.attribute_01%TYPE := p_region.attribute_01;
  -- Plugin attributes
  l_azure_sas_url p_plugin.attribute_01%TYPE := p_plugin.attribute_01;
  -- other vars
  l_result        apex_plugin.t_region_render_result;
--
BEGIN
    -- Debug
    IF apex_application.g_debug THEN
      apex_plugin_util.Debug_region(p_plugin => p_plugin, p_region => p_region);
    END IF;

 -- Call procedure to split SAS URL to base URL and Token
    Set_globals(l_azure_sas_url);
-- Create html
sys.htp.P('<iframe src="'
          ||g_base_url
          ||'/'
          ||l_filename
          ||g_sas
          ||'" type="application/pdf" style="width: 100%; height: 100vh" title="Iframe Example"></iframe>');

RETURN l_result;
END get_pdf; 
END AZURE_API_PKG;
/

